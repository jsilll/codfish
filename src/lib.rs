use strum_macros::EnumCount;

#[repr(u8)]
#[derive(Debug, Clone, Copy)]
pub enum CastlePerm {
    None = 0,
    WhiteKing = 1,
    WhiteQueen = 2,
    BlackKing = 4,
    BlackQueen = 8,
    All = 15,
}

#[repr(u8)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, EnumCount)]
pub enum Color {
    White = 0,
    Black = 1,
    Both = 2,
}

#[repr(u8)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, EnumCount)]
pub enum Piece {
    WhitePawn = 0,
    WhiteKnight = 1,
    WhiteBishop = 2,
    WhiteRook = 3,
    WhiteQueen = 4,
    WhiteKing = 5,
    BlackPawn = 6,
    BlackKnight = 7,
    BlackBishop = 8,
    BlackRook = 9,
    BlackQueen = 10,
    BlackKing = 11,
}

impl Piece {
    pub fn to_char(&self) -> char {
        match self {
            Piece::WhitePawn => 'P',
            Piece::WhiteKnight => 'N',
            Piece::WhiteBishop => 'B',
            Piece::WhiteRook => 'R',
            Piece::WhiteQueen => 'Q',
            Piece::WhiteKing => 'K',
            Piece::BlackPawn => 'p',
            Piece::BlackKnight => 'n',
            Piece::BlackBishop => 'b',
            Piece::BlackRook => 'r',
            Piece::BlackQueen => 'q',
            Piece::BlackKing => 'k',
        }
    }
}

#[repr(u8)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, EnumCount)]
pub enum File {
    A = 0,
    B = 1,
    C = 2,
    D = 3,
    E = 4,
    F = 5,
    G = 6,
    H = 7,
}

#[repr(u8)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, EnumCount)]
pub enum Rank {
    R1 = 0,
    R2 = 1,
    R3 = 2,
    R4 = 3,
    R5 = 4,
    R6 = 5,
    R7 = 6,
    R8 = 7,
}

#[repr(u8)]
#[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, EnumCount)]
pub enum Square {
    A1 = 0,
    B1 = 1,
    C1 = 2,
    D1 = 3,
    E1 = 4,
    F1 = 5,
    G1 = 6,
    H1 = 7,
    A2 = 8,
    B2 = 9,
    C2 = 10,
    D2 = 11,
    E2 = 12,
    F2 = 13,
    G2 = 14,
    H2 = 15,
    A3 = 16,
    B3 = 17,
    C3 = 18,
    D3 = 19,
    E3 = 20,
    F3 = 21,
    G3 = 22,
    H3 = 23,
    A4 = 24,
    B4 = 25,
    C4 = 26,
    D4 = 27,
    E4 = 28,
    F4 = 29,
    G4 = 30,
    H4 = 31,
    A5 = 32,
    B5 = 33,
    C5 = 34,
    D5 = 35,
    E5 = 36,
    F5 = 37,
    G5 = 38,
    H5 = 39,
    A6 = 40,
    B6 = 41,
    C6 = 42,
    D6 = 43,
    E6 = 44,
    F6 = 45,
    G6 = 46,
    H6 = 47,
    A7 = 48,
    B7 = 49,
    C7 = 50,
    D7 = 51,
    E7 = 52,
    F7 = 53,
    G7 = 54,
    H7 = 55,
    A8 = 56,
    B8 = 57,
    C8 = 58,
    D8 = 59,
    E8 = 60,
    F8 = 61,
    G8 = 62,
    H8 = 63,
}

impl Square {
    pub fn from_str(s: &str) -> Option<Self> {
        match s {
            "a1" => Some(Square::A1),
            "b1" => Some(Square::B1),
            "c1" => Some(Square::C1),
            "d1" => Some(Square::D1),
            "e1" => Some(Square::E1),
            "f1" => Some(Square::F1),
            "g1" => Some(Square::G1),
            "h1" => Some(Square::H1),
            "a2" => Some(Square::A2),
            "b2" => Some(Square::B2),
            "c2" => Some(Square::C2),
            "d2" => Some(Square::D2),
            "e2" => Some(Square::E2),
            "f2" => Some(Square::F2),
            "g2" => Some(Square::G2),
            "h2" => Some(Square::H2),
            "a3" => Some(Square::A3),
            "b3" => Some(Square::B3),
            "c3" => Some(Square::C3),
            "d3" => Some(Square::D3),
            "e3" => Some(Square::E3),
            "f3" => Some(Square::F3),
            "g3" => Some(Square::G3),
            "h3" => Some(Square::H3),
            "a4" => Some(Square::A4),
            "b4" => Some(Square::B4),
            "c4" => Some(Square::C4),
            "d4" => Some(Square::D4),
            "e4" => Some(Square::E4),
            "f4" => Some(Square::F4),
            "g4" => Some(Square::G4),
            "h4" => Some(Square::H4),
            "a5" => Some(Square::A5),
            "b5" => Some(Square::B5),
            "c5" => Some(Square::C5),
            "d5" => Some(Square::D5),
            "e5" => Some(Square::E5),
            "f5" => Some(Square::F5),
            "g5" => Some(Square::G5),
            "h5" => Some(Square::H5),
            "a6" => Some(Square::A6),
            "b6" => Some(Square::B6),
            "c6" => Some(Square::C6),
            "d6" => Some(Square::D6),
            "e6" => Some(Square::E6),
            "f6" => Some(Square::F6),
            "g6" => Some(Square::G6),
            "h6" => Some(Square::H6),
            "a7" => Some(Square::A7),
            "b7" => Some(Square::B7),
            "c7" => Some(Square::C7),
            "d7" => Some(Square::D7),
            "e7" => Some(Square::E7),
            "f7" => Some(Square::F7),
            "g7" => Some(Square::G7),
            "h7" => Some(Square::H7),
            "a8" => Some(Square::A8),
            "b8" => Some(Square::B8),
            "c8" => Some(Square::C8),
            "d8" => Some(Square::D8),
            "e8" => Some(Square::E8),
            "f8" => Some(Square::F8),
            "g8" => Some(Square::G8),
            "h8" => Some(Square::H8),
            _ => None,
        }
    }

    pub fn to_str(&self) -> &'static str {
        match self {
            Square::A1 => "a1",
            Square::B1 => "b1",
            Square::C1 => "c1",
            Square::D1 => "d1",
            Square::E1 => "e1",
            Square::F1 => "f1",
            Square::G1 => "g1",
            Square::H1 => "h1",
            Square::A2 => "a2",
            Square::B2 => "b2",
            Square::C2 => "c2",
            Square::D2 => "d2",
            Square::E2 => "e2",
            Square::F2 => "f2",
            Square::G2 => "g2",
            Square::H2 => "h2",
            Square::A3 => "a3",
            Square::B3 => "b3",
            Square::C3 => "c3",
            Square::D3 => "d3",
            Square::E3 => "e3",
            Square::F3 => "f3",
            Square::G3 => "g3",
            Square::H3 => "h3",
            Square::A4 => "a4",
            Square::B4 => "b4",
            Square::C4 => "c4",
            Square::D4 => "d4",
            Square::E4 => "e4",
            Square::F4 => "f4",
            Square::G4 => "g4",
            Square::H4 => "h4",
            Square::A5 => "a5",
            Square::B5 => "b5",
            Square::C5 => "c5",
            Square::D5 => "d5",
            Square::E5 => "e5",
            Square::F5 => "f5",
            Square::G5 => "g5",
            Square::H5 => "h5",
            Square::A6 => "a6",
            Square::B6 => "b6",
            Square::C6 => "c6",
            Square::D6 => "d6",
            Square::E6 => "e6",
            Square::F6 => "f6",
            Square::G6 => "g6",
            Square::H6 => "h6",
            Square::A7 => "a7",
            Square::B7 => "b7",
            Square::C7 => "c7",
            Square::D7 => "d7",
            Square::E7 => "e7",
            Square::F7 => "f7",
            Square::G7 => "g7",
            Square::H7 => "h7",
            Square::A8 => "a8",
            Square::B8 => "b8",
            Square::C8 => "c8",
            Square::D8 => "d8",
            Square::E8 => "e8",
            Square::F8 => "f8",
            Square::G8 => "g8",
            Square::H8 => "h8",
        }
    }
}

pub mod board;
